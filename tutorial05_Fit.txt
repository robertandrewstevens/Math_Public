OverviewFitting models to dataFitting modelsGiven:- a dynamic model- data for one or more state variablesWanted:- a set of parameters that fits the data Approach → package FME:1. try an initial guess for the parameters2. define cost function (e.g. least squares) with modCost() 3. fit the model with modFit4. plot model and dataInteractive web version of this chapter at:examples/FME/fit_twocomp.svgExample: Fit a compartment model to dataPharmacokinetic two compartment model- a substance accumulated in the fat and eliminated by the liver- two state variables, concentration in the fat CF and in the liver CL- 3 parameters: transport (kFL, kLF) and elimination (ke)dCL/dt = (kFL)(CF) − (kLF)(CL) − (ke)(CL) dCF/dt = (kLF)(CL) − (kFL)(CF) > library("FME")> twocomp <- function (time, y, parms, ...) {  with(as.list(c(parms, y)), {   dCL <- kFL*CF - kLF*CL - ke*CL # concentration in liver  dCF <- kLF*CL - kFL*CF # concentration in fat   list(c(dCL, dCF)) }) }Data and initial guess> dat <- data.frame(  time = seq(0, 28, 4),  CL = c(1.31, 0.61, 0.49, 0.41, 0.20, 0.12, 0.16, 0.21),   CF = c(1e-03, 0.041, 0.05, 0.039, 0.031, 0.025, 0.017, 0.012))> parms <- c(ke = 0.2, kFL = 0.1, kLF = 0.05)> times <- seq(0, 40, length = 200)> y0 <- c(CL = 1, CF = 0)> out1 <- ode(y0, times, twocomp, parms)> plot(out1, obs = dat)Define cost function (least squares):> cost <- function(p) {  out <- ode(y0, times, twocomp, p)  modCost(out, dat, weight = "none") # try weight = "std" or "mean" }Note:- naming of oservation and simulation data must be identical- data may be given in cross table (wide) or data base format (long)- different scaling and weighting options- optional: sequential build-up of cost functionFit the model:> parms <- c(ke = 0.2, kFL = 0.1, kLF = 0.05)> fit <- modFit(f = cost, p = parms)> summary(fit)Compare output with data> out1 <- ode(y0, times, twocomp, parms)> out2 <- ode(y0, times, twocomp, coef(fit))> plot(out1, out2, obs = dat,        obspar = list(pch = 16, col = "red"))Fit parameters and initial values> cost <- function(p, data, ...) {  yy <- p[c("CL", "CF")]  pp <- p[c("ke", "kFL", "kLF")]  out <- ode(yy, times, twocomp, pp)  modCost(out, data, ...)}Good start parameters can be very important:> #parms <- c(CL = 1.2, CF = 0.0, ke = 0.2, kFL = 0.1, kLF = 0.05) > parms <- c(CL = 1.2, CF = 0.001, ke = 0.2, kFL = 0.1, kLF = 0.05) > fit <- modFit(f = cost, p = parms, data = dat, weight = "std", lower = rep(0, 5), upper = c(2, 2, 1, 1, 1), method = "Marq")Fit parameters and initial values> y0 <- coef(fit)[c("CL", "CF")]> pp <- coef(fit)[c("ke", "kFL", "kLF")]> out3 <- ode(y0, times, twocomp, pp)> plot(out1, out2, out3, obs = dat,        col = c("grey", "blue", "red"), lty = 1)> summary(fit)